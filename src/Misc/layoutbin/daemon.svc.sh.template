#!/usr/bin/env bash

SVC_NAME=`echo -n "{{SvcNameVar}}" | tr -c "[:alnum:]" "_"`
SVC_DESCRIPTION="{{SvcDescription}}"

SVC_CMD=$1
arg_2=${2}

AGENT_ROOT=`pwd`

UNIT_PATH=/etc/rc.d/${SVC_NAME}
TEMPLATE_PATH=./bin/vsts.agent.daemon.template
TEMP_PATH=./bin/vsts.agent.daemon.temp
CONFIG_PATH=.service

user_id=`id -u`

# daemon must run as sudo
# this script is a convenience wrapper around daemon
if [ $user_id -ne 0 ]; then
    echo "Must run as sudo"
    exit 1
fi

function failed()
{
   local error=${1:-Undefined error}
   echo "Failed: $error" >&2
   exit 1
}

if [ ! -f "${TEMPLATE_PATH}" ]; then
    failed "Must run from agent root or install is corrupt"
fi

#check if we run as root
if [[ $(id -u) != "0" ]]; then
    echo "Failed: This script requires to run with sudo." >&2
    exit 1
fi

function install()
{
    echo "Creating launch agent in ${UNIT_PATH}"
    if [ -f "${UNIT_PATH}" ]; then
        failed "error: exists ${UNIT_PATH}"
    fi

    if [ -f "${TEMP_PATH}" ]; then
      rm "${TEMP_PATH}" || failed "failed to delete ${TEMP_PATH}"
    fi

    # can optionally use username supplied
    run_as_user=${arg_2:-$SUDO_USER}

    if [ -z "${run_as_user}" ]; then
      failed "Unable to determine the current user. Please use './svc.sh install [username]' to specify the user."
    fi

    echo "Run as user: ${run_as_user}"

    run_as_uid=$(id -u ${run_as_user}) || failed "User does not exist"
    echo "Run as uid: ${run_as_uid}"

    run_as_gid=$(id -g ${run_as_user}) || failed "Group not available"
    echo "gid: ${run_as_gid}"

    sed "s/{{User}}/${run_as_user}/g; s/{{Name}}/${SVC_NAME}/g; s/{{Description}}/$(echo ${SVC_DESCRIPTION} | sed -e 's/[\/&]/\\&/g')/g; s/{{AgentRoot}}/$(echo ${AGENT_ROOT} | sed -e 's/[\/&]/\\&/g')/g;" "${TEMPLATE_PATH}" > "${TEMP_PATH}" || failed "failed to create replacement temp file"
    mv "${TEMP_PATH}" "${UNIT_PATH}" || failed "failed to copy unit file"

    su -l ${run_as_user} -c "env > \"${AGENT_ROOT}/.env_file\"" > /dev/null || failed "failed to create environment file"

    # unit file should be executable and writeable by the owner
    chmod 755 "${UNIT_PATH}" || failed "failed to set permissions on ${UNIT_PATH}"

    # Since we started with sudo, runsvc.sh will be owned by root. Change this to current login user.
    cp ./bin/runsvc.sh ./runsvc.sh || failed "failed to copy runsvc.sh"
    chown ${run_as_uid}:${run_as_gid} ./runsvc.sh || failed "failed to set owner for runsvc.sh"
    chmod 755 ./runsvc.sh || failed "failed to set permission for runsvc.sh"

    sysrc ${SVC_NAME}_enable="YES" || failed "failed to enable ${SVC_NAME}"

    echo "${SVC_NAME}" > ${CONFIG_PATH} || failed "failed to create .service file"
    chown ${run_as_uid}:${run_as_gid} ${CONFIG_PATH} || failed "failed to set permission for ${CONFIG_PATH}"
}

function start()
{
    service ${SVC_NAME} start || failed "failed to start ${SVC_NAME}"
    status
}

function stop()
{
    service ${SVC_NAME} stop || failed "failed to stop ${SVC_NAME}"
    status
}

function uninstall()
{
    if service ${SVC_NAME} status > /dev/null; then
      stop
    fi

    sysrc -x ${SVC_NAME}_enable || failed "failed to disable  ${SVC_NAME}"
    rm "${UNIT_PATH}" || failed "failed to delete ${UNIT_PATH}"

    if [ -f "${CONFIG_PATH}" ]; then
      rm "${CONFIG_PATH}" || failed "failed to delete ${CONFIG_PATH}"
    fi
}

function status()
{
    if [ -f "${UNIT_PATH}" ]; then
        echo
        echo "${UNIT_PATH}"
    else
        echo
        echo "not installed"
        echo
        return
    fi

    service ${SVC_NAME} status
}

function usage()
{
    echo
    echo Usage:
    echo "./svc.sh [install, start, stop, status, uninstall]"
    echo "Commands:"
    echo "   install [user]: Install agent service as Root or specified user."
    echo "   start: Manually start the agent service."
    echo "   stop: Manually stop the agent service."
    echo "   status: Display status of agent service."
    echo "   uninstall: Uninstall agent service."
    echo
}

case $SVC_CMD in
   "install") install;;
   "status") status;;
   "uninstall") uninstall;;
   "start") start;;
   "stop") stop;;
   "status") status;;
   *) usage;;
esac

exit 0
